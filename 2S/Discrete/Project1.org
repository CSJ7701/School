#+OPTIONS: TOC:nil num:nil
#+TITLE: Project 1: Python Truth Tables
#+AUTHOR: Christian Johnson & Aidan Andersen
#+latex_header: \usepackage{amsmath}
#+latex_header: \usepackage{listings}
#+latex_header: \lstset{frame=single, breaklines=true}
#+latex_header: \usepackage{outline}

#+begin_export latex
\newpage
#+end_export

* Python                                                          :noexport:
#+begin_src python :session DP1

  import pandas as pd
  import io
  from sympy import *

  def ConvertToLatex(df, alignment="c"):
      numcolumns=df.shape[1]
      numRows=df.shape[0]
      output=io.StringIO()
      colFormat=("%s|%s" % (alignment, alignment*numcolumns))
      #Write Header
      output.write("\\begin{tabular}{%s}\n" % colFormat)
      columnLabels=["\\textbf{%s}" % label for label in df.columns]
      output.write(" & %s\\\\\\hline\n" % " & ".join(columnLabels))
      # Date Lines
      for i in range(numRows):
          output.write("\\textbf{%s} & %s\\\\\n"
                       % (df.index[i], " & ".join([str(val) for val in df.iloc[i]])))

      # Write footer
      output.write("\\end{tabular}")
      return output.getvalue()                   

#+end_src

#+RESULTS:
: None

* Proof 1
#+begin_export latex
$p\lor(\lnot q)$\newline
$(t\lor s)\implies(p\lor r)$\newline
$(\lnot r)\lor(t\lor s)$\newline
$\underline{p\implies(t\lor s)}$\newline
$(p\land r)\implies(q\lor r)$\newline\newline
\textbf{Claim:} $(p \land r) \implies (q\lor r)$\newline
\newline
\textbf{Proof:}
\begin{itemize}
\item Assume $p \land r$. \textit{(Assumption)}
\item Since $p$, and $p\lor(\lnot q)$, q. \textit{(Disjunctive Syllogism)}
\item Given p and r, and having concluded q, then infer $(p\land r) \implies (q\lor r)$


\end{itemize}
\newline\newline
This conclusion can be shown in the truth table on the next 2 pages.
\newpage
\begin{lstlisting}[language=Python]
  variables=['p', 'q', 'r', 's', 't']
  expression1=lambda p,r: p and r
  expression2=lambda q,r: q or r
  expression3=lambda p,q,r: Implies(p&r,q|r)
  data=[]

  for p in (True, False):
      for q in (True, False):
          for r in (True, False):
              for t in (True, False):
                  for s in (True, False):
                      result1=expression1(p,r)
                      result2=expression2(q,r)
                      result3=expression3(p,q,r)
                      data.append([p,q,r,t,s,result1,result2,result3])
  df=pd.DataFrame(data, columns=['p','q','r','s','t','p and r','q or r','(p and r) implies (q or r)'])
  ConvertToLatex(df)
\end{lstlisting}
#+end_export


#+begin_src python :results file :file Project1Export1.tex :exports none :session DP1

    variables=['p', 'q', 'r', 's', 't']
    expression1=lambda p,r: p and r
    expression2=lambda q,r: q or r
    expression3=lambda p,q,r: Implies(p&r,q|r)
    data=[]

    for p in (True, False):
        for q in (True, False):
            for r in (True, False):
                for t in (True, False):
                    for s in (True, False):
                        result1=expression1(p,r)
                        result2=expression2(q,r)
                        result3=expression3(p,q,r)
                        data.append([p,q,r,t,s,result1,result2,result3])
    df=pd.DataFrame(data, columns=['p','q','r','s','t','p and r','q or r','(p and r) implies (q or r)'])
    ConvertToLatex(df)


#+end_src

#+RESULTS:
[[file:Project1Export1.tex]]

#+begin_export latex
\newpage
\hspace{-2cm}\input{Project1Export1.tex}
\newpage
#+end_export

* Proof 2

#+begin_export latex
$p\lor(\lnot q)$\\
$(t\lor s)\implies(p\lor r)$ \\
$(\lnot r)\lor(t\lor s)$ \\
$\underline{p\iff(t\lor s)}$\\
$(q\lor r)\implies(p\lor r)$\\
\newline\newline
\textbf{Claim:} $(q\lor r)\implies(p\lor r)$\newline
\textbf{Proof:}
\begin{itemize}
\item Assume $q\lor r$.  \textit{(Assumption)}
\item There are 3 cases to this assumption, q, r, or q and r. \textit{(Proof by cases)}\newline
If q:
\begin{enumerate}
\item If q, then not $\lnot q$ \textit{(Definition)}
\item Since $p\lor(\lnot q)$ and not $\lnot q$, then p.
\end{enumerate}\newline
If r:
\begin{enumerate}
\item If not r, then $t\lor s$ from $(\lnot r)\lor(t\lor s)$ \textit{(Disjunction)}
\item If $(t\lor s)$ then p, from $p \iff (t\lor s)$
\end{enumerate}
If q and r:
\begin{enumerate}
\item If q and r, then then not $\lnot q$ and not $\lnot r$.
\item As shown in both previous cases, not $\lnot q$ and not $\lnot r$ both imply p.
\end{enumerate}
\item In all cases, p is true, $\therefore(q\lor r)\implies(p\lor r)$
\end{itemize}
This is shown in the truth table on the next few pages.\
In the truth table, I substiture $(p \lor \lnot r)$ for p.
This is because I faced issues running $q\lor r \implies p\lor r$.
Specifically, whenever p and r were both false, the conclusion was false.
Examining the given conditions, I did not believe that this situation was possible.
I eventually realized that, since $(t\lor s)\implies p$, I could simplify and arrive at $(\lnot r)\lor p$.
\newpage
\begin{lstlisting}[language=Python]
  variables=['p', 'q', 'r', 's', 't']
  expression1=lambda q,r: q or r
  expression2=lambda p,r: p or r
  claim_expression=lambda q,r,p: Implies(q or r, (p or not r) or r)

  data=[]

  for p in (True, False):
      for q in (True, False):
          for r in (True, False):
              for t in (True, False):
                  for s in (True, False):
                      result1=expression1(q,r)
                      result2=expression2(p,r)
                      claim_result=claim_expression(q,r,p)
                      data.append([p,q,r,t,s,result1,result2,claim_result])
                      
  df=pd.DataFrame(data, columns=['p','q','r','t','s','q|r','p|r','(q|r) implies ((p|r`)|r)'])
          
  ConvertToLatex(df)
      
\end{lstlisting}
#+end_export


#+begin_src python :results file :file Project1Export2.tex :exports none :session DP1

  variables=['p', 'q', 'r', 's', 't']
  expression1=lambda q,r: q or r
  expression2=lambda p,r: p or r
  claim_expression=lambda q,r,p: Implies(q or r, (p or not r) or r)

  data=[]

  for p in (True, False):
      for q in (True, False):
          for r in (True, False):
              for t in (True, False):
                  for s in (True, False):
                      result1=expression1(q,r)
                      result2=expression2(p,r)
                      claim_result=claim_expression(q,r,p)
                      data.append([p,q,r,t,s,result1,result2,claim_result])
                      
  df=pd.DataFrame(data, columns=['p','q','r','t','s','q|r','p|r','(q|r) implies ((p|r`)|r)'])
          
  ConvertToLatex(df)
      

#+end_src

#+RESULTS:
[[file:Project1Export2.tex]]
#+begin_export latex
\newpage
\hspace{-2cm}\input{Project1Export2.tex}
\newpage
#+end_export
