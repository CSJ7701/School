#+TITLE: Project 2
#+AUTHOR: Christian Johnson /and Aidan Andersen
#+LATEX_HEADER: \usepackage{minted}

#+begin_export latex
\newpage
#+end_export



* Python Code
#+NAME:
#+ATTR_LATEX: :options frame=single
#+begin_src python :session Discrete-Project2
  from math import factorial

  def Pascal(numRows):
      triangle=""
      for i in range(numRows+1):
          for j in range(numRows-i+1):
              triangle+="  "
          # loop to get elements of row i
          for j in range(i+1):
              # nCr = n!/((n-r)!*r!)
              num=factorial(i)
              den=factorial(j)*factorial(i-j)
              triangle+=( str(num//den) + "   " )

          triangle+="\n"

      return triangle
#+end_src

#+RESULTS: 

* Print Pascal's Triangle

** $(s-t)^{10}$

#+ATTR_LATEX: :options frame=single
#+begin_src python :session Discrete-Project2 :exports both
  Pascal(10)
#+end_src

#+RESULTS:
#+ATTR_LATEX: :options frame=single
#+begin_example
                      1   
                    1   1   
                  1   2   1   
                1   3   3   1   
              1   4   6   4   1   
            1   5   10   10   5   1   
          1   6   15   20   15   6   1   
        1   7   21   35   35   21   7   1   
      1   8   28   56   70   56   28   8   1   
    1   9   36   84   126   126   84   36   9   1   
  1   10   45   120   210   252   210   120   45   10   1   
#+end_example

*Binomial Expansion*:
$s^{10}+10s^{9}t+45s^{8}t^2+120s^7t^3+210s^6t^4+252s^5t^5+210s^4t^6+120s^3t^7+45s^2t^8+10st^9+t^{10}$

** $(2x+y)^5$
#+ATTR_LATEX: :options frame=single
#+begin_src python :session Discrete-Project2 :exports both
  Pascal(5)
#+end_src

#+RESULTS:
:             1   
:           1   1   
:         1   2   1   
:       1   3   3   1   
:     1   4   6   4   1   
:   1   5   10   10   5   1   

*Binomial Expansion*:
$2x^{5}+5(2x)^{4}y+10(2x)^{3}y^{2}+10(2x)^{2}y^{3}+5(2x)y^{4}+y^{5}$

* List elements of a power set

** Python
#+ATTR_LATEX: :options frame=single, breaklines=true
#+begin_src python :session Discrete-Project2
  from itertools import chain, combinations

  def powerset(given):
      s=list(given)
      result=chain.from_iterable(combinations(s,r) for r in range(len(s)+1))
      return list(result)

#+end_src

#+RESULTS:

** $(a,b,c,d,e)$
#+ATTR_LATEX: :options frame=single, breaklines=true
#+begin_src python :session Discrete-Project2 :results value verbatim code
  my_set={'a','b','c','d','e'}
  seta=powerset(my_set)
  seta
#+end_src

#+ATTR_LATEX: :options frame=single, breaklines=true
#+begin_src python
[(), ('b',), ('a',), ('d',), ('e',), ('c',), ('b', 'a'), ('b', 'd'), ('b', 'e'), ('b', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'c'), ('d', 'e'), ('d', 'c'), ('e', 'c'), ('b', 'a', 'd'), ('b', 'a', 'e'), ('b', 'a', 'c'), ('b', 'd', 'e'), ('b', 'd', 'c'), ('b', 'e', 'c'), ('a', 'd', 'e'), ('a', 'd', 'c'), ('a', 'e', 'c'), ('d', 'e', 'c'), ('b', 'a', 'd', 'e'), ('b', 'a', 'd', 'c'), ('b', 'a', 'e', 'c'), ('b', 'd', 'e', 'c'), ('a', 'd', 'e', 'c'), ('b', 'a', 'd', 'e', 'c')]
#+end_src

#+ATTR_LATEX: :options frame=single, breaklines=true
#+begin_src python :session Discrete-Project2 :exports both
len(seta)
#+end_src
#+RESULTS:
: 32

** $(2,4,6,8,10,one)$
#+ATTR_LATEX: :options frame=single, breaklines=true
#+begin_src python :session Discrete-Project2 :results value verbatim code

  my_set={2,4,6,8,10,'one'}
  setb=powerset(my_set)
  setb
#+end_src

#+ATTR_LATEX: :options frame=single, breaklines=true
#+begin_src python
[(), (2,), (4,), (6,), (8,), (10,), ('one',), (2, 4), (2, 6), (2, 8), (2, 10), (2, 'one'), (4, 6), (4, 8), (4, 10), (4, 'one'), (6, 8), (6, 10), (6, 'one'), (8, 10), (8, 'one'), (10, 'one'), (2, 4, 6), (2, 4, 8), (2, 4, 10), (2, 4, 'one'), (2, 6, 8), (2, 6, 10), (2, 6, 'one'), (2, 8, 10), (2, 8, 'one'), (2, 10, 'one'), (4, 6, 8), (4, 6, 10), (4, 6, 'one'), (4, 8, 10), (4, 8, 'one'), (4, 10, 'one'), (6, 8, 10), (6, 8, 'one'), (6, 10, 'one'), (8, 10, 'one'), (2, 4, 6, 8), (2, 4, 6, 10), (2, 4, 6, 'one'), (2, 4, 8, 10), (2, 4, 8, 'one'), (2, 4, 10, 'one'), (2, 6, 8, 10), (2, 6, 8, 'one'), (2, 6, 10, 'one'), (2, 8, 10, 'one'), (4, 6, 8, 10), (4, 6, 8, 'one'), (4, 6, 10, 'one'), (4, 8, 10, 'one'), (6, 8, 10, 'one'), (2, 4, 6, 8, 10), (2, 4, 6, 8, 'one'), (2, 4, 6, 10, 'one'), (2, 4, 8, 10, 'one'), (2, 6, 8, 10, 'one'), (4, 6, 8, 10, 'one'), (2, 4, 6, 8, 10, 'one')]
#+end_src

#+begin_src python :session Discrete-Project2 :exports both
  len(setb)
#+end_src

#+RESULTS:
: 64

** $(a, 1, b, 2, c, 3, 6, 9, 12, 15, 4, 8, 16)$

#+begin_src python :session Discrete-Project2 :exports both

  my_set={'a', 1, 'b', 2, 'c', 3, 6, 9, 12, 15, 4, 8, 16}
  setc=powerset(my_set)
  len(setc)
  
#+end_src

#+RESULTS:
: 8192

** $(3, 1, 24, 5, 9, 10, 11, 16, 29, 37, 54, 42, 18)$

#+begin_src python :session Discrete-Project2 :exports both

  my_set={3, 1, 24, 5, 9, 10, 11, 16, 29, 37, 54, 42, 18}
  setd=powerset(my_set)
  len(setd)

#+end_src

#+RESULTS:
: 8192

** Function to find powerset length
In general, the length of a powerset will be $2^{n}$, where n is the number of elements in a set.
